name: .NET App Publish

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build-and-publish:
    runs-on: windows-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # Cache NuGet packages and .NET tools - placed BEFORE .NET installation
    - name: Cache
      uses: actions/cache@v4.2.3
      with:
        # Cache NuGet packages and the .NET tools
        path: |
          ~/.nuget/packages
          !~/.nuget/packages/unwanted
          ~/.dotnet/tools
        # The cache key depends on the hash of all project files and the dotnet version
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/*.props', '**/*.targets') }}-${{ hashFiles('**/packages.lock.json') }}
        # Restore keys in case of a cache miss
        restore-keys: |
          ${{ runner.os }}-nuget-
        # Enable cross-platform cache sharing
        enableCrossOsArchive: true
        # Don't fail if cache is missing
        fail-on-cache-miss: false
        # Always save the cache, even on workflow failure
        save-always: true

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    # Get the commit hash and create a proper version
    - name: Create version
      id: version
      run: |
        $commitHash = git rev-parse HEAD
        $shortHash = $commitHash.Substring(0,8)
        # Generate a version that includes the full commit hash
        $version = "1.0.0+$commitHash"
        $fileVersion = "1.0.0.$([int]::Parse($shortHash, [System.Globalization.NumberStyles]::HexNumber))

        echo "HASH=$commitHash" >> $env:GITHUB_OUTPUT
        echo "VERSION=$version" >> $env:GITHUB_OUTPUT
        echo "FILE_VERSION=$fileVersion" >> $env:GITHUB_OUTPUT
      shell: pwsh

    # Restore dependencies
    - name: Restore dependencies
      run: |
        $projectFile = Get-ChildItem -Path . -Filter *.csproj -Recurse -File | Select-Object -First 1 -ExpandProperty FullName
        echo "Using project file: $projectFile"
        dotnet restore "$projectFile"
        
        # Also restore test project dependencies if it exists
        $testProjectFile = Get-ChildItem -Path . -Filter RTXLauncher-Tests.csproj -Recurse -File | Select-Object -First 1 -ExpandProperty FullName
        if ($testProjectFile) {
          echo "Using test project file: $testProjectFile"
          dotnet restore "$testProjectFile"
        }
      shell: pwsh

    # Run unit tests
    - name: Run unit tests
      run: |
        $testProjectFile = Get-ChildItem -Path . -Filter RTXLauncher-Tests.csproj -Recurse -File | Select-Object -First 1 -ExpandProperty FullName
        if ($testProjectFile) {
          echo "Running tests from: $testProjectFile"
          dotnet test "$testProjectFile" --no-restore --verbosity normal
        } else {
          echo "Test project RTXLauncher-Tests.csproj not found"
          exit 1
        }
      shell: pwsh
      
    # Publish the application with proper version
    - name: Publish
      run: |
        $projectFile = Get-ChildItem -Path . -Filter *.csproj -Recurse -File | Where-Object { $_.Name -ne "RTXLauncher-Tests.csproj" } | Select-Object -First 1 -ExpandProperty FullName
        echo "Using project file: $projectFile"
        dotnet publish "$projectFile" -p:PublishProfile=FolderProfile -p:InformationalVersion="${{ steps.version.outputs.VERSION }}" -p:AssemblyVersion="1.0.0.0" -p:FileVersion="${{ steps.version.outputs.FILE_VERSION }}"
      shell: pwsh

    # Find the published exe
    - name: Find published EXE
      id: find_exe
      run: |
        $exePath = Get-ChildItem -Path . -Filter *.exe -Recurse -File | Where-Object { $_.DirectoryName -like "*\bin\*\*\publish*" } | Select-Object -First 1 -ExpandProperty FullName
        if ($exePath) {
          echo "Found EXE at: $exePath"
          echo "EXE_PATH=$exePath" >> $env:GITHUB_OUTPUT
        } else {
          echo "No EXE found in publish directories"
          exit 1
        }
      shell: pwsh

    # Upload the EXE as an artifact
    - name: Upload EXE artifact
      uses: actions/upload-artifact@v4
      with:
        name: RTXLauncher-${{ steps.version.outputs.VERSION }}
        path: ${{ steps.find_exe.outputs.EXE_PATH }}
        retention-days: 30
