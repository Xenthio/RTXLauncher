<Styles xmlns="https://github.com/avaloniaui"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:utils="using:RTXLauncher.Avalonia.Utilities">

	<!-- ========================================================== -->
	<!--                       RESOURCES                            -->
	<!-- ========================================================== -->
	<Styles.Resources>
		<!-- VGUI Olive Green Color Palette (from OliveGreen.scss) -->
		<Color x:Key="VguiBaseColor">#4C5844</Color>
		<!-- rgb(76,88,68) -->
		<Color x:Key="VguiInsetBackgroundColor">#3E4637</Color>
		<Color x:Key="VguiActiveColor">#958831</Color>

		<!-- Outset (Normal) Border Colors -->
		<Color x:Key="VguiBorderTopColor">#889180</Color>
		<Color x:Key="VguiBorderBottomColor">#282E22</Color>

		<!-- Inset (Pressed) Border Colors -->
		<Color x:Key="VguiBorderTopInsetColor">#282E22</Color>
		<Color x:Key="VguiBorderBottomInsetColor">#889180</Color>

		<!-- Text Colors -->
		<Color x:Key="VguiTextColor">#FFFFFF</Color>
		<Color x:Key="VguiTextLabelColor">#CFD6CA</Color>
		<Color x:Key="VguiTextActiveColor">#C4B550</Color>
		<Color x:Key="VguiTextDisabledColor">#282E22</Color>
		<Color x:Key="VguiTextDisabledShadowColor">#889180</Color>
		<Color x:Key="VguiTextFadedColor">#A0AA95</Color>

		<!-- Misc -->
		<Color x:Key="VguiCheckBorderColor">#676458</Color>

		<!-- Brushes (These are what you apply to controls) -->
		<SolidColorBrush x:Key="VguiBackgroundBrush" Color="{StaticResource VguiBaseColor}"/>
		<SolidColorBrush x:Key="VguiInsetBackgroundBrush" Color="{StaticResource VguiInsetBackgroundColor}"/>
		<SolidColorBrush x:Key="VguiActiveBrush" Color="{StaticResource VguiActiveColor}"/>
		<SolidColorBrush x:Key="VguiForegroundBrush" Color="{StaticResource VguiTextColor}"/>
		<SolidColorBrush x:Key="VguiCheckBorderBrush" Color="{StaticResource VguiCheckBorderColor}"/>
		<SolidColorBrush x:Key="VguiTextActiveBrush" Color="{StaticResource VguiTextActiveColor}"/>
		<SolidColorBrush x:Key="VguiTextLabelBrush" Color="{StaticResource VguiTextLabelColor}"/>
		<SolidColorBrush x:Key="VguiTextDisabledBrush" Color="{StaticResource VguiTextDisabledColor}"/>
		<SolidColorBrush x:Key="VguiTextFadedBrush" Color="{StaticResource VguiTextFadedColor}"/>
		<SolidColorBrush x:Key="VguiBorderTopBrush" Color="{StaticResource VguiBorderTopColor}"/>
		<SolidColorBrush x:Key="VguiBorderBottomBrush" Color="{StaticResource VguiBorderBottomColor}"/>
		<SolidColorBrush x:Key="VguiBorderTopInsetBrush" Color="{StaticResource VguiBorderTopInsetColor}"/>
		<SolidColorBrush x:Key="VguiBorderBottomInsetBrush" Color="{StaticResource VguiBorderBottomInsetColor}"/>
	</Styles.Resources>

	<!-- ========================================================== -->
	<!--                   DESIGN-TIME PREVIEW                      -->
	<!-- ========================================================== -->
	<Design.PreviewWith>
		<Border Padding="20" 
				Background="{StaticResource VguiBackgroundBrush}">
			<StackPanel Spacing="10" Width="250">
				<TextBlock Text="VGUI Theme Preview" FontWeight="Bold" Foreground="{StaticResource VguiTextColor}"/>
				<Border Classes="vgui-seperator"/>
				<Button Content="Standard Button"/>
				<Button Content="Disabled Button" IsEnabled="False"/>
				<CheckBox Content="Enabled CheckBox"/>
				<CheckBox Content="Disabled CheckBox" IsEnabled="False"/>
				<TextBox Text="Editable Text"/>
				<TextBox Text="Disabled Text" IsEnabled="False"/>
				<Border Classes="vgui-inset" Padding="10">
					<TextBlock Text="This is an inset panel."/>
				</Border>
				<ListBox>
					<ListBoxItem Content="List Item 1"/>
					<ListBoxItem Content="List Item 2"/>
					<ListBoxItem Content="List Item 3"/>
					<ListBoxItem Content="List Item 4"/>
				</ListBox>
				<ComboBox>
					<ComboBoxItem Content="Option 1"/>
					<ComboBoxItem Content="Option 2"/>
					<ComboBoxItem Content="Option 3"/>
				</ComboBox>
			</StackPanel>
		</Border>
	</Design.PreviewWith>

	<!-- ========================================================== -->
	<!--                     GLOBAL STYLES                          -->
	<!-- ========================================================== -->
	<Style Selector="Window">
		<Setter Property="utils:ThemeHelpers.DisableFontSmoothing" Value="True"/>
		
		<Setter Property="Background" Value="{StaticResource VguiBackgroundBrush}"/>
		<Setter Property="Foreground" Value="{StaticResource VguiForegroundBrush}"/>
		<Setter Property="FontFamily" Value="Tahoma, Verdana, Segoe UI"/>
		<Setter Property="FontSize" Value="13"/>

	</Style>

	<Style Selector="TextBlock">
		<Setter Property="Foreground" Value="{StaticResource VguiForegroundBrush}"/>
	</Style>

	<!-- ========================================================== -->
	<!--                      BUTTON STYLE                          -->
	<!-- ========================================================== -->
	<Style Selector="Button">
		<Setter Property="Padding" Value="10,4"/>
		<Setter Property="HorizontalContentAlignment" Value="Left"/>
		<Setter Property="VerticalContentAlignment" Value="Center"/>
		<Setter Property="Background" Value="{StaticResource VguiBackgroundBrush}"/>
		<Setter Property="Template">
			<ControlTemplate>
				<Panel>
					<!-- Bevel Effect: Dark bottom/right border -->
					<Border BorderBrush="{StaticResource VguiBorderBottomBrush}" BorderThickness="1"/>
					<!-- Bevel Effect: Light top/left border -->
					<Border BorderBrush="{StaticResource VguiBorderTopBrush}" BorderThickness="1,1,0,0"/>
					<!-- Main background area -->
					<Border Name="PART_Background" Background="{TemplateBinding Background}" Margin="1"/>
					<!-- Content (Text) -->
					<ContentPresenter Name="PART_ContentPresenter"
                                      Content="{TemplateBinding Content}"
                                      HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                      Margin="{TemplateBinding Padding}">

						<ContentPresenter.RenderTransform>
							<TranslateTransform X="-1" Y="-1" />
							<!-- Move content to simulate a misalignment quirk in vgui -->
						</ContentPresenter.RenderTransform>
					</ContentPresenter>
				</Panel>
			</ControlTemplate>
		</Setter>
	</Style>
	<Style Selector="Button:pressed">
		<Setter Property="Template">
			<ControlTemplate>
				<Panel>
					<!-- Inset Bevel: Dark top/left border -->
					<Border BorderBrush="{StaticResource VguiBorderTopInsetBrush}" BorderThickness="1"/>
					<!-- Inset Bevel: Light bottom/right border -->
					<Border BorderBrush="{StaticResource VguiBorderBottomInsetBrush}" BorderThickness="0,0,1,1"/>
					<Border Name="PART_Background" Background="{TemplateBinding Background}" Margin="1"/>
					<!-- Move content to simulate being pressed -->
					<ContentPresenter Name="PART_ContentPresenter"
                                      Content="{TemplateBinding Content}"
                                      HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                      Margin="{TemplateBinding Padding}">

						<ContentPresenter.RenderTransform>
							<TranslateTransform X="0" Y="0" />
						</ContentPresenter.RenderTransform>
					</ContentPresenter>
				</Panel>
			</ControlTemplate>
		</Setter>
	</Style>
	<Style Selector="Button:disabled">
		<Setter Property="Foreground" Value="{StaticResource VguiTextDisabledBrush}"/>
	</Style>

	<!-- ========================================================== -->
	<!--                      CHECKBOX STYLE                        -->
	<!-- ========================================================== -->
	<Style Selector="CheckBox">
		<Setter Property="Cursor" Value="Hand"/>

		<Setter Property="Template">
			<ControlTemplate>
				<StackPanel Orientation="Horizontal" Spacing="8" VerticalAlignment="Center">

					<!-- The CheckBox square (now a single, flat border) -->
					<Border Name="PART_CheckSquare"
							Width="15" Height="15"
							Background="{StaticResource VguiBackgroundBrush}"
							BorderBrush="{StaticResource VguiCheckBorderBrush}"
							BorderThickness="1"
							CornerRadius="1">
						<!-- Added the corner radius from your SCSS -->

						<!-- The Check Mark -->
						<TextBlock Name="PART_CheckMark"
								   Text="a"
								   FontFamily="Webdings"
								   FontSize="21"
								   Foreground="{StaticResource VguiTextColor}"
								   ClipToBounds="False"
								   HorizontalAlignment="Center"
								   VerticalAlignment="Center"
								   IsVisible="False">
							<TextBlock.RenderTransform>
								<TranslateTransform X="-3" Y="0"/>
							</TextBlock.RenderTransform>
						</TextBlock>
					</Border>

					<!-- The Content (Text Label) -->
					<ContentPresenter Name="PART_ContentPresenter"
									  Content="{TemplateBinding Content}"
									  VerticalAlignment="Center"/>
				</StackPanel>
			</ControlTemplate>
		</Setter>
	</Style>


	<!-- 2. Style the TextBlock that is a child of the CheckBox for its DEFAULT state -->
	<!-- This selector is MORE SPECIFIC than the global "TextBlock" selector, so it wins. -->
	<Style Selector="CheckBox TextBlock">
		<Setter Property="Foreground" Value="{StaticResource VguiTextLabelBrush}"/>
	</Style>

	<!-- 3. Style the TextBlock that is a child of a CHECKED CheckBox -->
	<!-- This is even more specific, so it overrides the default CheckBox TextBlock style. -->
	<Style Selector="CheckBox:checked TextBlock">
		<Setter Property="Foreground" Value="{StaticResource VguiTextActiveBrush}"/>
	</Style>

	<!-- 4. Style the TextBlock that is a child of a DISABLED CheckBox -->
	<Style Selector="CheckBox:disabled TextBlock">
		<Setter Property="Foreground" Value="{StaticResource VguiTextDisabledBrush}"/>
	</Style>
	<!-- ** END OF FIX ** -->


	<!-- These styles for the visual parts of the template remain the same -->
	<Style Selector="CheckBox:checked /template/ TextBlock#PART_CheckMark">
		<Setter Property="Foreground" Value="#F2F2F2"/>
		<Setter Property="IsVisible" Value="True"/>
	</Style>
	<Style Selector="CheckBox:disabled /template/ Border#PART_CheckSquare">
		<Setter Property="Opacity" Value="0.5"/>
	</Style>


	<!-- ========================================================== -->
	<!--                      TEXTBOX STYLE                         -->
	<!-- ========================================================== -->
	<Style Selector="TextBox">
		<!-- Base Properties -->
		<Setter Property="Background" Value="{StaticResource VguiInsetBackgroundColor}"/>
		<Setter Property="Foreground" Value="{StaticResource VguiTextColor}"/>
		<Setter Property="CaretBrush" Value="{StaticResource VguiTextColor}"/>
		<Setter Property="Padding" Value="5"/>
		<Setter Property="MinHeight" Value="24"/>
		<!-- Sets the default height -->
		<Setter Property="VerticalContentAlignment" Value="Center"/>

		<!-- VGUI Inset Border Effect -->
		<!-- We redefine the template to add the 3D inset border -->
		<Setter Property="Template">
			<ControlTemplate>
				<Panel>
					<!-- Inset Bevel: Dark top/left border -->
					<Border BorderBrush="{StaticResource VguiBorderTopInsetBrush}" BorderThickness="1"/>
					<!-- Inset Bevel: Light bottom/right border -->
					<Border BorderBrush="{StaticResource VguiBorderBottomInsetBrush}" BorderThickness="0,0,1,1"/>
					<!-- The actual text entry area (ScrollViewer) sits inside the border -->
					<TextPresenter Name="PART_TextPresenter"
								   Background="{TemplateBinding Background}"
								   Margin="{TemplateBinding Padding}"
								   VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
				</Panel>
			</ControlTemplate>
		</Setter>
	</Style>

	<!-- Style for a multi-line TextBox -->
	<Style Selector="TextBox.is-multiline">
		<!-- This class would be applied in your View XAML like: <TextBox Classes="is-multiline"/> -->
		<Setter Property="AcceptsReturn" Value="True"/>
		<Setter Property="TextWrapping" Value="Wrap"/>
		<Setter Property="MinHeight" Value="72"/>
		<!-- A larger default height for multi-line -->
		<Setter Property="VerticalContentAlignment" Value="Top"/>
	</Style>

	<!-- Style for when a TextBox is disabled -->
	<Style Selector="TextBox:disabled">
		<Setter Property="Foreground" Value="{StaticResource VguiTextFadedBrush}"/>
		<Setter Property="Background" Value="{StaticResource VguiBackgroundBrush}"/>
	</Style>

	<!-- ========================================================== -->
	<!--                      SIDEBAR STYLES                        -->
	<!-- ========================================================== -->

	<!-- Style for the ListBox itself (the sidebar) -->
	<Style Selector="ListBox">
		<Setter Property="Padding" Value="6,3"/>
		<Setter Property="Background" Value="{StaticResource VguiInsetBackgroundBrush}"/>
		<!-- Redefine the template to add the 3D inset border -->
		<Setter Property="Template">
			<ControlTemplate>
				<Panel>
					<!-- Inset Bevel: Dark top/left border -->
					<Border BorderBrush="{StaticResource VguiBorderTopInsetBrush}" BorderThickness="1"/>
					<!-- Inset Bevel: Light bottom/right border -->
					<Border BorderBrush="{StaticResource VguiBorderBottomInsetBrush}" BorderThickness="0,0,1,1"/>
					<!-- The ScrollViewer that holds the items -->
					<ScrollViewer Name="PART_ScrollViewer"
								  Background="{TemplateBinding Background}"
								  Padding="{TemplateBinding Padding}"
								  Margin="1">

						<ItemsPresenter Name="PART_ItemsPresenter"
										ItemsPanel="{TemplateBinding ItemsPanel}" />
					</ScrollViewer>
				</Panel>
			</ControlTemplate>
		</Setter>
	</Style>

	<Style Selector="ListBoxItem">
		<Setter Property="Padding" Value="5"/>
		<Setter Property="MinHeight" Value="20"/>
		<Setter Property="Background" Value="Transparent"/>
	</Style>
	
	<Style Selector="ListBoxItem TextBlock">
		<Setter Property="Foreground" Value="{StaticResource VguiTextColor}"/>
		<!-- Use the bright white for default text -->
	</Style>

	<!-- This style for the SELECTED item now correctly overrides the new default -->
	<Style Selector="ListBoxItem:selected /template/ ContentPresenter#PART_ContentPresenter">
		<Setter Property="Background" Value="{StaticResource VguiActiveBrush}"/>
	</Style>
	<Style Selector="ListBoxItem:selected TextBlock">
		<!-- Set a different color for the selected text for contrast against the active background -->
	</Style>

	<!-- The focus style remains the same -->
	<Style Selector="ListBoxItem:focus /template/ Border#FocusBorder">
		<Setter Property="IsVisible" Value="True"/>
	</Style>

	<!-- ========================================================== -->
	<!--                      COMBOBOX STYLE                        -->
	<!-- ========================================================== -->

	<!-- Style for the items INSIDE the dropdown list -->
	<Style Selector="ComboBoxItem">
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="MinHeight" Value="20"/>
		<Setter Property="Padding" Value="7,2"/>
	</Style>
	<Style Selector="ComboBoxItem:pointerover /template/ ContentPresenter#PART_ContentPresenter, ComboBoxItem:selected /template/ ContentPresenter#PART_ContentPresenter">
		<Setter Property="Background" Value="{StaticResource VguiActiveBrush}"/>
		<Setter Property="Foreground" Value="{StaticResource VguiTextColor}"/>
	</Style>


	<!-- Main style for the ComboBox itself -->
	<Style Selector="ComboBox">
		<Setter Property="MinHeight" Value="24"/>
		<Setter Property="Foreground" Value="{StaticResource VguiTextLabelBrush}"/>
		<Setter Property="Background" Value="{StaticResource VguiInsetBackgroundBrush}"/>
		<Setter Property="Template">
			<ControlTemplate>
				<Panel>
					<Border BorderBrush="{StaticResource VguiBorderTopInsetBrush}" BorderThickness="1"/>
					<Border BorderBrush="{StaticResource VguiBorderBottomInsetBrush}" BorderThickness="0,0,1,1"/>

					<Grid Margin="1" ColumnDefinitions="*,Auto">
						<Border Grid.Column="0" Grid.ColumnSpan="2" Background="{TemplateBinding Background}"/>
						<ContentPresenter Name="PART_ContentPresenter"
										  Content="{TemplateBinding SelectionBoxItem}"
										  Padding="5,0"
										  VerticalAlignment="Center"/>
						<ToggleButton Name="PART_DropDownButton" Grid.Column="1" Focusable="False" Width="17">
							<ToggleButton.Template>
								<ControlTemplate>
									<Image Source="avares://RTXLauncher.Avalonia/Assets/icon_down.png" Width="9" Height="8" VerticalAlignment="Center" HorizontalAlignment="Center"/>
								</ControlTemplate>
							</ToggleButton.Template>
						</ToggleButton>
					</Grid>


					<Popup Name="PART_Popup"
						   IsLightDismissEnabled="True"
						   PlacementTarget="{TemplateBinding}"
						   IsOpen="{TemplateBinding IsDropDownOpen, Mode=TwoWay}">
						
						<!-- Wrap the ScrollViewer and the border Panel in a Grid -->
						<Grid MinWidth="{Binding $parent[ComboBox].Bounds.Width}">
							<!-- Layer 0: The background and the list of items -->
							<Border Background="{StaticResource VguiBackgroundBrush}">
								<ScrollViewer RenderOptions.TextRenderingMode="Alias">
									<ItemsPresenter Name="PART_ItemsPresenter" ItemsPanel="{TemplateBinding ItemsPanel}"/>
								</ScrollViewer>
							</Border>

							<!-- Layer 1: The border effect, drawn on top -->
							<!-- IsHitTestVisible="False" allows clicks to pass through to the items below -->
							<Panel IsHitTestVisible="False">
								<Border BorderBrush="{StaticResource VguiBorderTopBrush}" BorderThickness="1,1,0,0"/>
								<Border BorderBrush="{StaticResource VguiBorderBottomBrush}" BorderThickness="0,0,1,1"/>
							</Panel>
						</Grid>

					</Popup>
				</Panel>
			</ControlTemplate>
		</Setter>
	</Style>

	<!-- Style for when the ComboBox is focused -->
	<Style Selector="ComboBox:focus /template/ ContentPresenter#PART_ContentPresenter">
		<Setter Property="Background" Value="{StaticResource VguiActiveBrush}"/>
		<Setter Property="Foreground" Value="{StaticResource VguiTextColor}"/>
	</Style>

	<!-- ========================================================== -->
	<!--                    LAYOUT STYLE CLASSES                    -->
	<!-- ========================================================== -->
	<Style Selector="Border.vgui-inset">
		<Setter Property="Background" Value="{StaticResource VguiInsetBackgroundBrush}"/>
		<Setter Property="BorderBrush" Value="{StaticResource VguiBorderTopInsetBrush}"/>
		<Setter Property="BorderThickness" Value="1"/>
		<Setter Property="CornerRadius" Value="0"/>
	</Style>

	<Style Selector="Border.vgui-seperator">
		<Setter Property="Height" Value="2"/>
		<Setter Property="Margin" Value="0,5"/>
		<Setter Property="Background" Value="{StaticResource VguiBorderTopInsetBrush}"/>
		<Setter Property="BorderBrush" Value="{StaticResource VguiBorderBottomInsetBrush}"/>
		<Setter Property="BorderThickness" Value="0,0,0,1"/>
	</Style>

</Styles>